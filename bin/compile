#!/bin/bash

indent() {
  sed -u 's/^/       /'
}

echo "-----> Install libjpeg"

BUILD_DIR=$1
CACHE_DIR=$2
VENDOR_DIR="$BUILD_DIR/vendor"
INSTALL_DIR="$VENDOR_DIR/libjpeg"
CACHE_FILE="$CACHE_DIR/libjpeg.tar.gz"


if [ ! -f $CACHE_FILE ]; then
  # install libjpeg
  LIBJPEG_VERSION="${LIBJPEG_VERSION:-v8d}"
  LIBJPEG_FILE="jpegsrc.$IMAGE_MAGICK_VERSION.tar.gz"
  LIBJPEG_DIR="jpegsrc.$IMAGE_MAGICK_VERSION"
  # SSL cert used on libjpeg not recognized by heroku.
  LIBJPEG_URL="http://www.ijg.org/files/jpegsrc.$LIBJPEG_VERSION.tar.gz"

  echo "-----> Downloading libjpeg from $LIBJPEG_URL"
  wget $LIBJPEG_URL -P $BUILD_DIR | indent
  
  echo "-----> Extracting libjpeg from $BUILD_DIR/$LIBJPEG_FILE"
  if [ ! -f $BUILD_DIR/$LIBJPEG_FILE ]; then
    echo "Error: Unable to download libjpeg" | indent
    ls $BUILD_DIR | indent
    exit 1;
  fi
  tar xvf $BUILD_DIR/$LIBJPEG_FILE | indent

  echo "-----> Building libjpeg"
  cd $LIBJPEG_DIR
  export CPPFLAGS="-I$INSTALL_DIR/include"
  export LDFLAGS="-L$INSTALL_DIR/lib"
  ./configure --prefix=$INSTALL_DIR
  make && make install
  cd ..
  rm -rf $LIBJPEG_DIR

  # cache for future deploys
  echo "-----> Caching libjpeg installation"
  cd $VENDOR_DIR
  REL_INSTALL_DIR="libjpeg"
  tar czf $REL_INSTALL_DIR.tar.gz $REL_INSTALL_DIR
  mv $REL_INSTALL_DIR.tar.gz $CACHE_FILE

else
  # cache exists, extract it
  echo "-----> Extracting libjpeg $CACHE_FILE => $VENDOR_DIR"
  tar xzf $CACHE_FILE -C $VENDOR_DIR
fi

# update PATH and LD_LIBRARY_PATH
echo "-----> Updating environment variables"
PROFILE_PATH="$BUILD_DIR/.profile.d/libjpeg.sh"
ACTUAL_INSTALL_PATH="$HOME/vendor/libjpeg"
mkdir -p $(dirname $PROFILE_PATH)
echo "export PATH=$ACTUAL_INSTALL_PATH/bin:\$PATH" >> $PROFILE_PATH
echo "export LD_LIBRARY_PATH=$ACTUAL_INSTALL_PATH/lib:\$LD_LIBRARY_PATH" >> $PROFILE_PATH